{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/service/token-storage.service\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(router, tokenStorage) {\n      this.router = router;\n      this.tokenStorage = tokenStorage;\n    }\n\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(err => {\n        //  alert(err.status)\n        if (err.status == 0) {\n          // console.log(\"error status code:\"+err.status)\n          this.tokenStorage.signOut();\n          this.router.navigate(['login']);\n        } else {\n          // console.log(\"HTTP Response received:\"+JSON.stringify(err));\n          // console.log(\"request:\"+JSON.stringify(request));\n          if (!request.url.endsWith('doLogin')) {\n            this.tokenStorage.signOut();\n\n            if (err.status === 401) {\n              ///debugger\n              // auto logout if 401 response returned from api\n              // console.log(\"HTTP Response received: unauthorized\");\n              if (!request.url.endsWith('dologout')) {\n                this.router.navigate(['login']);\n              } else {\n                this.tokenStorage.signOut;\n                this.router.navigate(['login']);\n              }\n            } else if (err.status === 400) {\n              this.router.navigate(['login']);\n            } else if (err.status === 500) {\n              this.router.navigate(['login']);\n            } else if (err.status === 504) {\n              this.router.navigate(['login']);\n            }\n\n            const error = err.error.message || err.statusText;\n            return throwError(error);\n          } else {\n            this.tokenStorage.signOut;\n            this.router.navigate(['login']);\n          }\n        }\n\n        const error = err.error.message || err.statusText;\n        return throwError(error);\n      }));\n    }\n\n  }\n\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.TokenStorageService));\n  };\n\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}