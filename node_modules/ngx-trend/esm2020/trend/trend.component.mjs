import { animate, keyframes, state, style, transition, trigger } from '@angular/animations';
import { Component, Input, ViewChild } from '@angular/core';
import { buildLinearPath, buildSmoothPath } from '../helpers/DOM.helpers';
import { normalize } from '../helpers/math.helpers';
import { generateId } from '../helpers/misc.helpers';
import { normalizeDataset } from './trend.helpers';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class TrendComponent {
    constructor() {
        this.autoDraw = false;
        this.autoDrawDuration = 2000;
        this.autoDrawEasing = 'ease';
        this.padding = 8;
        this.radius = 10;
        this.stroke = 'black';
        this.strokeLinecap = '';
        this.strokeWidth = 1;
        this.gradient = [];
        this.svgHeight = '25%';
        this.svgWidth = '100%';
        this.animationState = '';
        this.id = generateId();
        this.gradientId = `ngx-trend-vertical-gradient-${this.id}`;
    }
    ngOnChanges() {
        // We need at least 2 points to draw a graph.
        if (!this.data || this.data.length < 2) {
            return;
        }
        // `data` can either be an array of numbers:
        // [1, 2, 3]
        // or, an array of objects containing a value:
        // [{ value: 1 }, { value: 2 }, { value: 3 }]
        //
        // For now, we're just going to convert the second form to the first.
        // Later on, if/when we support tooltips, we may adjust.
        const plainValues = this.data.map(point => {
            if (typeof point === 'number') {
                return point;
            }
            return point.value;
        });
        // Our viewbox needs to be in absolute units, so we'll default to 300x75
        // Our SVG can be a %, though; this is what makes it scalable.
        // By defaulting to percentages, the SVG will grow to fill its parent
        // container, preserving a 1/4 aspect ratio.
        const viewBoxWidth = this.width || 300;
        const viewBoxHeight = this.height || 75;
        this.svgWidth = this.width || '100%';
        this.svgHeight = this.height || '25%';
        this.viewBox = `0 0 ${viewBoxWidth} ${viewBoxHeight}`;
        const root = location.href.split(location.hash || '#')[0];
        this.pathStroke =
            this.gradient && this.gradient.length ? `url('${root}#${this.gradientId}')` : undefined;
        this.gradientTrimmed = this.gradient
            .slice()
            .reverse()
            .map((val, idx) => {
            return {
                idx,
                stopColor: val,
                offset: normalize(idx, 0, this.gradient.length - 1 || 1),
            };
        });
        const normalizedValues = normalizeDataset(plainValues, this.padding, viewBoxWidth - this.padding, 
        // NOTE: Because SVGs are indexed from the top left, but most data is
        // indexed from the bottom left, we're inverting the Y min/max.
        viewBoxHeight - this.padding, this.padding);
        if (this.autoDraw && this.animationState !== 'active') {
            this.animationState = 'inactive';
            setTimeout(() => {
                this.lineLength = this.pathEl.nativeElement.getTotalLength();
                this.animationState = 'active';
            });
        }
        this.d = this.smooth
            ? buildSmoothPath(normalizedValues, this.radius)
            : buildLinearPath(normalizedValues);
    }
}
TrendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: TrendComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TrendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.1", type: TrendComponent, selector: "ngx-trend", inputs: { data: "data", smooth: "smooth", autoDraw: "autoDraw", autoDrawDuration: "autoDrawDuration", autoDrawEasing: "autoDrawEasing", width: "width", height: "height", padding: "padding", radius: "radius", stroke: "stroke", strokeLinecap: "strokeLinecap", strokeWidth: "strokeWidth", gradient: "gradient", preserveAspectRatio: "preserveAspectRatio", svgHeight: "svgHeight", svgWidth: "svgWidth" }, viewQueries: [{ propertyName: "pathEl", first: true, predicate: ["pathEl"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <svg
      *ngIf="data && data.length >= 2"
      [attr.width]="svgWidth"
      [attr.height]="svgHeight"
      [attr.stroke]="stroke"
      [attr.stroke-width]="strokeWidth"
      [attr.stroke-linecap]="strokeLinecap"
      [attr.viewBox]="viewBox"
      [attr.preserveAspectRatio]="preserveAspectRatio"
    >
      <defs *ngIf="gradient && gradient.length">
        <linearGradient [attr.id]="gradientId" x1="0%" y1="0%" x2="0%" y2="100%">
          <stop
            *ngFor="let g of gradientTrimmed"
            [attr.key]="g.idx"
            [attr.offset]="g.offset"
            [attr.stop-color]="g.stopColor"
          />
        </linearGradient>
      </defs>
      <path
        fill="none"
        #pathEl
        [attr.stroke]="pathStroke"
        [attr.d]="d"
        [@pathAnimaiton]="{
          value: animationState,
          params: {
            autoDrawDuration: autoDrawDuration,
            autoDrawEasing: autoDrawEasing,
            lineLength: lineLength
          }
        }"
      />
    </svg>
  `, isInline: true, directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], animations: [
        trigger('pathAnimaiton', [
            state('inactive', style({ display: 'none' })),
            transition('* => active', [
                style({ display: 'initial' }),
                // We do the animation using the dash array/offset trick
                // https://css-tricks.com/svg-line-animation-works/
                animate('{{ autoDrawDuration }}ms {{ autoDrawEasing }}', keyframes([
                    style({
                        'stroke-dasharray': '{{ lineLength }}px',
                        'stroke-dashoffset': '{{ lineLength }}px',
                    }),
                    style({
                        'stroke-dasharray': '{{ lineLength }}px',
                        'stroke-dashoffset': 0,
                    }),
                ])),
                // One unfortunate side-effect of the auto-draw is that the line is
                // actually 1 big dash, the same length as the line itself. If the
                // line length changes (eg. radius change, new data), that dash won't
                // be the same length anymore. We can fix that by removing those
                // properties once the auto-draw is completed.
                style({
                    'stroke-dashoffset': '',
                    'stroke-dasharray': '',
                }),
            ]),
        ]),
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: TrendComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-trend',
                    template: `
    <svg
      *ngIf="data && data.length >= 2"
      [attr.width]="svgWidth"
      [attr.height]="svgHeight"
      [attr.stroke]="stroke"
      [attr.stroke-width]="strokeWidth"
      [attr.stroke-linecap]="strokeLinecap"
      [attr.viewBox]="viewBox"
      [attr.preserveAspectRatio]="preserveAspectRatio"
    >
      <defs *ngIf="gradient && gradient.length">
        <linearGradient [attr.id]="gradientId" x1="0%" y1="0%" x2="0%" y2="100%">
          <stop
            *ngFor="let g of gradientTrimmed"
            [attr.key]="g.idx"
            [attr.offset]="g.offset"
            [attr.stop-color]="g.stopColor"
          />
        </linearGradient>
      </defs>
      <path
        fill="none"
        #pathEl
        [attr.stroke]="pathStroke"
        [attr.d]="d"
        [@pathAnimaiton]="{
          value: animationState,
          params: {
            autoDrawDuration: autoDrawDuration,
            autoDrawEasing: autoDrawEasing,
            lineLength: lineLength
          }
        }"
      />
    </svg>
  `,
                    animations: [
                        trigger('pathAnimaiton', [
                            state('inactive', style({ display: 'none' })),
                            transition('* => active', [
                                style({ display: 'initial' }),
                                // We do the animation using the dash array/offset trick
                                // https://css-tricks.com/svg-line-animation-works/
                                animate('{{ autoDrawDuration }}ms {{ autoDrawEasing }}', keyframes([
                                    style({
                                        'stroke-dasharray': '{{ lineLength }}px',
                                        'stroke-dashoffset': '{{ lineLength }}px',
                                    }),
                                    style({
                                        'stroke-dasharray': '{{ lineLength }}px',
                                        'stroke-dashoffset': 0,
                                    }),
                                ])),
                                // One unfortunate side-effect of the auto-draw is that the line is
                                // actually 1 big dash, the same length as the line itself. If the
                                // line length changes (eg. radius change, new data), that dash won't
                                // be the same length anymore. We can fix that by removing those
                                // properties once the auto-draw is completed.
                                style({
                                    'stroke-dashoffset': '',
                                    'stroke-dasharray': '',
                                }),
                            ]),
                        ]),
                    ],
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { data: [{
                type: Input
            }], smooth: [{
                type: Input
            }], autoDraw: [{
                type: Input
            }], autoDrawDuration: [{
                type: Input
            }], autoDrawEasing: [{
                type: Input
            }], width: [{
                type: Input
            }], height: [{
                type: Input
            }], padding: [{
                type: Input
            }], radius: [{
                type: Input
            }], stroke: [{
                type: Input
            }], strokeLinecap: [{
                type: Input
            }], strokeWidth: [{
                type: Input
            }], gradient: [{
                type: Input
            }], preserveAspectRatio: [{
                type: Input
            }], svgHeight: [{
                type: Input
            }], svgWidth: [{
                type: Input
            }], pathEl: [{
                type: ViewChild,
                args: ['pathEl']
            }] } });
//# sourceMappingURL=data:application/json;base64,